// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: service.proto

package robusthotstuffpb

import (
	context "context"
	proto "github.com/wisecoach/robust-hotstuff/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HotstuffClient is the client API for Hotstuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotstuffClient interface {
	Consensus(ctx context.Context, in *proto.Message, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hotstuffClient struct {
	cc grpc.ClientConnInterface
}

func NewHotstuffClient(cc grpc.ClientConnInterface) HotstuffClient {
	return &hotstuffClient{cc}
}

func (c *hotstuffClient) Consensus(ctx context.Context, in *proto.Message, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Hotstuff/Consensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotstuffServer is the server API for Hotstuff service.
// All implementations must embed UnimplementedHotstuffServer
// for forward compatibility
type HotstuffServer interface {
	Consensus(context.Context, *proto.Message) (*emptypb.Empty, error)
	mustEmbedUnimplementedHotstuffServer()
}

// UnimplementedHotstuffServer must be embedded to have forward compatible implementations.
type UnimplementedHotstuffServer struct {
}

func (UnimplementedHotstuffServer) Consensus(context.Context, *proto.Message) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consensus not implemented")
}
func (UnimplementedHotstuffServer) mustEmbedUnimplementedHotstuffServer() {}

// UnsafeHotstuffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotstuffServer will
// result in compilation errors.
type UnsafeHotstuffServer interface {
	mustEmbedUnimplementedHotstuffServer()
}

func RegisterHotstuffServer(s grpc.ServiceRegistrar, srv HotstuffServer) {
	s.RegisterService(&Hotstuff_ServiceDesc, srv)
}

func _Hotstuff_Consensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Consensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hotstuff/Consensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Consensus(ctx, req.(*proto.Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Hotstuff_ServiceDesc is the grpc.ServiceDesc for Hotstuff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hotstuff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Hotstuff",
	HandlerType: (*HotstuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Consensus",
			Handler:    _Hotstuff_Consensus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
